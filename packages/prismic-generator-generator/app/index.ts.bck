import * as Generator from 'yeoman-generator'
import * as path from 'path'

export default class extends Generator {
  name: string | undefined;

  pm: 'npm' | 'yarn' | undefined;

  language: 'javascript'| 'typescript' | undefined;

  path: string | undefined

  slicemachine: boolean | undefined

  constructor(argv: string | string[], opts: Generator.GeneratorOptions) {
    super(argv, opts)
    this.pm = opts.pm
    this.name = opts.name
    this.language = opts.language
    this.path = opts.path
  }

  async initializing() {
    if (this.path) this.destinationRoot(this.path)
  }

  async prompting() {
    if (!this.name) {
      this.name = await this.prompt([
        {
          type: 'input',
          name: 'name',
          message: 'name of the generator',
          transformer: value => `generator-prismic-${value}`,
          validate: value => value ? true : 'required',
        },
      ]).then(res => `generator-prismic-${res.name}`)
    }

    if (!this.language) {
      this.language = await this.prompt([
        {
          type: 'list',
          name: 'lanaguage',
          default: 'javascript',
          choices: [
            {name: 'JavaScript', value: 'javascript'},
            {name: 'TypeScript', value: 'typescript'},
          ],
          message: 'Language',
        },
      ]).then(res => res.lanaguage)
    }

    if (!this.pm) {
      this.pm = await this.prompt([
        {
          type: 'list',
          name: 'pm',
          message: 'package manager',
          choices: [
            {
              name: 'Yarn',
              value: 'yarn',
            },
            {
              name: 'Npm',
              value: 'npm',
            },
          ],
        },
      ]).then(res => res.pm)
    }

    if (!this.slicemachine) {
      this.slicemachine = await this.prompt({
        type: 'confirm',
        name: 'slicemachine',
        message: 'SliceMachine',
        default: true,
      }).then(res => res.slicemachine)
    }
  }

  async configuring() {
    this.destinationRoot(this.name)
  }

  async writing() {
    const template = this.language || 'javascript'

    const appPath = path.join(template, 'generators', 'app')
    const opts = {name: this.name, slicemachine: this.slicemachine, shortName: this.name?.replace('generator-prismic-', '')}

    this.fs.copyTpl(
      this.templatePath(appPath),
      this.destinationPath(path.join('generators', 'app')),
      opts,
    )

    this.fs.copyTpl(
      this.templatePath('_.gitignore'),
      this.destinationPath('.gitignore'),
      opts,
    )

    this.fs.copyTpl(
      this.templatePath('_package.json'),
      this.destinationPath('package.json'),
      opts,
    )

    if (this.language === 'typescript') {
      this.fs.copyTpl(
        this.templatePath('_tsconfig.json'),
        this.destinationPath('tsconfig.json'),
        opts,
      )
    }

    if (this.slicemachine) {
      const createSlicePath = path.join(template, 'create-slice')
      const slicemachinePath = path.join(template, 'slicemachhine')
      const storybook = path.join(template, 'storybook')

    }


    if (this.language === 'typescript' && this.slicemachine) {
      const dependencies = {
        chalk: '^4.1.1',
        inquirer: '^7.3.3',
        'is-valid-path': '^0.1.1',
        'sm-commons': '^0.0.23',
      }
      this.fs.extendJSON(this.destinationPath('package.json'), {dependencies})
    }
  }

  async install() {
    if (this.pm === 'yarn') {
      return this.yarnInstall()
    }
    return this.npmInstall()
  }
}
